from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from rest_framework import status

from .product_sale_serializer import ReceiptCreateSerializer, ReceiptDetailSerializer, PaymentMethodSerializer
from django.db import transaction
from rest_framework import status
from rest_framework.decorators import (
    api_view,
    permission_classes,
    authentication_classes,
)
from datetime import datetime
from rest_framework.permissions import IsAuthenticated
from accounts.permissions import IsBusinessOwner
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from marketplace.models import (
    Product,
    ProductVariant,
    Receipt,
    PaymentMethod,
    ProductSale,
    ProductStock
)
from .models import Business
from accounts.JWT_AUTH import CookieJWTAuthentication
from .product_sale_serializer import (
    EnhancedProductListSerializer,
    ProductVariantSerializer,
)
from marketplace.ProductsSet import ProductSet
import uuid
from .ProductCreateService import ProductService
from django.core.exceptions import ValidationError
from decimal import Decimal
from .utils.generate_receipt_pdf import generate_receipt_pdf


@api_view(["GET"])
@authentication_classes([CookieJWTAuthentication])
@permission_classes([IsAuthenticated])
def get_active_payment_methods(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    methods = PaymentMethod.objects.filter(is_active=True)
    serializer = PaymentMethodSerializer(methods, many=True)
    return Response(serializer.data)


@api_view(["GET"])
@authentication_classes([CookieJWTAuthentication])
@permission_classes([IsAuthenticated, IsBusinessOwner])
def sales_products_api(request, business_slug):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–∂. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É."""
    business = get_object_or_404(Business, slug=business_slug)

    category_pk = request.GET.get("category")
    if category_pk:
        products = ProductSet.get_products_by_category(category_pk)
        products = products.filter(business=business)
    else:
        products = Product.objects.filter(business=business).order_by("-created_at")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    filtered_products, applied_filters = ProductSet.filter_products(
        products,
        request,
        search=True,
        price=True,
        barcode=True,
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    barcode = request.GET.get("search")
    matched_variant = None
    if barcode and barcode.isdigit():  # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π re.match(r'^\d{8,14}$', barcode)
        matched_variant = (
            ProductVariant.objects.select_related("product")
            .filter(barcode=barcode, product__in=filtered_products)
            .first()
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    page_obj, pagination = ProductSet.pagination_for_products(
        filtered_products, request
    )

    # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
    serialized_products = EnhancedProductListSerializer(
        page_obj, many=True, context={"request": request}
    ).data

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –ø–æ–¥–º–µ–Ω–∏–º variants
    if matched_variant:
        for product_data in serialized_products:
            if product_data["id"] == matched_variant.product.id:
                filtered_variant_data = ProductVariantSerializer(
                    matched_variant, context={"request": request}
                ).data
                product_data["variants"] = [filtered_variant_data]

    return Response(
        {
            "products": serialized_products,
            "pagination": pagination,
            "applied_filters": applied_filters,
        }
    )



@api_view(["POST"])
@transaction.atomic
@authentication_classes([CookieJWTAuthentication])
@permission_classes([IsAuthenticated, IsBusinessOwner])
def create_receipt(request, business_slug):
    print(request.data)
    business = ProductService.get_business(request.user, business_slug)

    serializer = ReceiptCreateSerializer(data=request.data)
    serializer.is_valid(raise_exception=True)

    validated_data = serializer.validated_data
    sales_data = validated_data.pop('items')
    receipt_discount_amount = validated_data.pop("discount_amount", 0)
    receipt_discount_percent = validated_data.pop("discount_percent", 0)

    total_amount = 0
    product_sales = []

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —á–µ–∫–∞
    number = f"CHK-{uuid.uuid4().hex[:8].upper()}"

    customer = validated_data.get('customer', None)

    receipt = Receipt.objects.create(
        number=number,
        payment_method=validated_data['payment_method'],
        customer=customer,
        customer_name=validated_data.get('customer_name', ''),
        customer_phone=validated_data.get('customer_phone', ''),
        is_online=False,
        is_paid=True,
        total_amount=0  # –≤—Ä–µ–º–µ–Ω–Ω–æ 0, –ø–æ–∑–∂–µ –æ–±–Ω–æ–≤–∏–º
    )

    for item in sales_data:
        variant = item['variant']
        location = item['location']
        quantity = item['quantity']
        discount_amount = item.get("discount_amount", 0)
        discount_percent = item.get("discount_percent", 0)

        price = Decimal(str(variant.current_price))
        discount_percent = Decimal(str(discount_percent))
        discount_amount = Decimal(str(discount_amount))

        unit_discount = price * discount_percent / Decimal('100') + discount_amount
        unit_price_final = max(price - unit_discount, Decimal('0'))
        total_price = unit_price_final * quantity

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ª–æ–∫–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å—É
        if location.business != business:
            raise ValidationError(f"–õ–æ–∫–∞—Ü–∏—è '{location}' –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–∏–∑–Ω–µ—Å—É '{business.name}'.")

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –±–∏–∑–Ω–µ—Å—É
        if variant.product.business != business:
            raise ValidationError(f"–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ '{variant}' –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–∏–∑–Ω–µ—Å—É '{business.name}'.")

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        try:
            stock = ProductStock.objects.select_for_update().get(variant=variant, location=location)
        except ProductStock.DoesNotExist:
            raise ValidationError(f"–í–∞—Ä–∏–∞–Ω—Ç '{variant}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ '{location.name}'.")

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        if stock.available_quantity < quantity:
            raise ValidationError(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ '{variant}' –≤ '{location.name}'. –î–æ—Å—Ç—É–ø–Ω–æ: {stock.available_quantity}"
            )

        product_sale = ProductSale(
            receipt=receipt,
            variant=variant,
            location=location,
            quantity=quantity,
            price_per_unit=price,
            discount_percent=discount_percent,
            discount_amount=discount_amount,
            total_price=total_price,
            is_paid=True
        )
        product_sales.append(product_sale)
        total_amount += total_price

    ProductSale.objects.bulk_create(product_sales)

    if receipt_discount_percent:
        total_amount -= total_amount * receipt_discount_percent / 100
    total_amount -= receipt_discount_amount
    receipt.total_amount = max(total_amount, 0)
    receipt.save(update_fields=["total_amount"])

    generate_receipt_pdf(receipt.id, save=True)

    receipt.refresh_from_db()

    return Response(ReceiptDetailSerializer(receipt).data, status=status.HTTP_201_CREATED)
